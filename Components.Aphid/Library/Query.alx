aphidQuery = {
    where: @(predicate, list) {
        x = [];
        for (element in list) if (predicate(element)) x.add(element);
        ret x;
    },

    select: @(selector, list) {
        x = [];
        for (y in list) y |> selector |> x.add;
        ret x;
    },

    selectMany: @(selector, list) {
        x = [];
        for (y in list) for (z in selector(y)) x.add(z);
        ret x;
    },

    any: @(predicate, list) {
        for (element in list) if (predicate(element)) ret true;
        ret false;
    },

    first: @(predicate, list) {
        for (x in list) if (predicate(x)) ret x;
    },

    distinct: @(list) {
        x = [];
        for (y in list) if (!__list.contains(x, y)) x.add(y);
        ret x;
    },

    iter: @(action, list) {
        for (x in list) action(x);
    },

    all: @(predicate, list) {
        for (x in list) if (!predicate(x)) ret false;
        ret true;
    },

    count: @(list) __list.count(list),

    concat: @(list, otherList) {
        x = [];
        for (y in otherList) x.add(y);
        for (y in list) x.add(y);
        ret x;
    },

    skip: @(count, list) {
        x = []; i = 0;
        for (y in list) {
            if (i >= count) x.add(y);
            i++;
        }
        ret x;
    },

    take: @(count, list) {
        x = []; i = 0;
        for (y in list) {
            if (i < count) x.add(y);
            i++;
        }
        ret x;
    },
    
    aggr: @(acc, list) {
        if (list.count() == 1) ret list[0];
        else {
            s = list[0];
            for (x in list.skip(1)) s = acc(s, x);
            ret s;
        }
    },

    add: @(list) aq.aggr(@(x, y)x + y, list),
};

aq = aphidQuery;