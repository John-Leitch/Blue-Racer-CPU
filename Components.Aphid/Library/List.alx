extend list { 
	count: @(l) __list.count(l),
		
	add: @(l, item) { 
		__list.add(l, item);
		ret l;
	},

	insert: @(l, index, item) { 
		__list.insert(l, index, item);
		ret l;
	},

	iter: @(l, action) { 
		for (x in l) action(x);
	},

	contains: @(l, item) __list.contains(l, item),

	select: @(l, selector) {
		x = [];
		for (y in l) __list.add(x, selector(y));
		ret x;
	},

	where: @(l, predicate) { 
		x = [];
		for (y in l) if (predicate(y)) __list.add(x, y);
		ret x;
	},

	first: @(l, predicate) {
		for (x in l) if (predicate(x)) ret x;
	},

	selectMany: @(l, selector) {
		x = [];
		for (y in l) for (z in selector(y)) x.add(z);
		ret x;
	},

	distinct: @(l) {
		x = [];
		for (y in l) if (!__list.contains(x, y)) x.add(y);
		ret x;
	},

	any: @(l, predicate) {
		if (predicate defined) {
			for (x in l) if (predicate(x)) ret true;
			ret false;
		}
		else {
				ret __list.count(l) != 0;
		}
	},

	all: @(l, predicate) {
		for (x in l) if (!predicate(x)) ret false;
		ret true;
	},

	concat: @(l, second) {
		x = [];
		for (y in l) x.add(y);
		for (y in second) x.add(y);
		ret x;
	},

	skip: @(l, count) {
		x = []; i = 0;
		for (y in l) {
			if (i >= count) x.add(y);
			i++;
		}
		ret x;
	},

	take: @(l, count) {
		x = []; i = 0;
		for (y in l) {
			if (i < count) x.add(y);
			i++;
		}
		ret x;
	},

	aggregate: @(l, acc) {
		if (l.count() == 1) ret l[0];
		else {
			s = l[0];
			for (x in l.skip(1)) s = acc(s, x);
			ret s;
		}
	},

	orderBy: @(l, keySelector) __list.orderBy(l, keySelector),
		
	orderByDescending: @(l, keySelector) __list.orderByDescending(l, keySelector),
		
	addAll: @(l) l.aggregate(@(x, y)x + y),

	clone: @(l) {
		x = [];
		l.iter(x.add);
		ret x;
	},
}